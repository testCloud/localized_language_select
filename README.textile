h1. LocalizedLanguageSelect

Rails plugin to provide support for localized <tt><select></tt> menu with language names and for
storing language information as language _code_ (eg. 'sv'), not _name_ (eg. 'Swedish'), in the database.

Uses the Rails internationalization framework ("I18n":http://rails-i18n.org) for translating the names of languages.
Requires Rails 2.2 (released November 21st, 2008) or later versions.

Language names are loaded from hashes in plugin directory, according to <tt>I18n.locale</tt> value.

You can easily translate language codes in your application like this:
!openwindow1.gif!:http://hobix.com/

!https://travis-ci.org/jwaterfaucett/localized_language_select.png!

<pre>
  <%= I18n.t @user.language, :scope => 'languages' %>  
</pre>

h2. Generating language locale files

The project comes with both rake tasks and a generator to generate and import locale files for languages:

h3. Rails 3 generator

The project now comes with a Rails 3 generator to import locale files and place them in config/locales in your Rails 3 app.

@rails g localized_language_select:import de ru --file-ext yml@

h3. Rake import tasks

The following Rake tasks can be used for importing language names from Unicode.org's CLDR repository (http://www.unicode.org/cldr/data/charts/summary/root.html)

* <tt>rake import:language_select locale=de</tt> 
* <tt>rake yaml_locales:language_select locale=de</tt> 

The _import_ one generates ruby files, the _yaml_locales_ task generates yml files.

Don't forget to restart the application when you add new locale.

The code borrows heavily from the LocalizedCountrySelect plugin - "localized_country_select":http://github.com/karmi/localized_country_select

h2. Install & Usage

Install as plugin:

<pre>$ rails plugin install https://github.com/kristianmandrup/localized_language_select.git</pre>  

Install as gem:

Insert in Gemfile

<pre>gem 'localized_language_select'</pre>

Then to instal it, run:

<pre>$ bundle install</pre>  

Then to install the locale files, run:

<pre>$ rails g localized_language_select:locales</pre>  

This will copy the locale files to your Rails config/locales dir. The files will be called 'language.en.yml' and so on...

Note: you can specify which locales using the @--locales@ option, which takes a list of locales.

<pre>$ rails g localized_language_select:locales --locales da en fr</pre>  

h2. Usage example

<pre>
  <%= localized_language_select(:user, :language, [], :include_blank => 'Please choose...') %>  
</pre>


will become:

<pre>
  <select name="user[language]" id="user_language">
  <option value="">Please choose...</option>
  <option disabled="disabled" value="">-------------</option>
  <option value="aa">Afar</option>
  ...
  <option value="zza">ZaZa</option>
  </select>  
</pre>
    
for the <tt>en</tt> locale.

h2. Options

@:exclude@ option

<pre>
  <%= localized_language_select(:user, :language, ['English'], :include_blank => 'Please choose...', :exclude => ['Afrikaans']) %>  
</pre>

@:only@ option

<pre>
  <%= localized_language_select(:user, :language, ['English'], :include_blank => 'Please choose...', :only => ['German', 'French']) %>  
</pre>

h2. Important!

Add translations for your language requirements using the rake tasks supplied, then use the generator to copy them into the Rails locales folder.

h2. Framework usage

This plugin should also integrate nicely with various formbuilders, including Formtastic

Formtastic example:

<pre>
<%= semantic_form_for @user do |form| %>  
  ...
  <%= form.input :lang, :as => :language, :priority_languages => ['English'], :include_blank => 'Please choose...', :only => ['German', 'French']) %>    
  ...
<% end %>  
</pre>

h2. Formbuilder configuration

* ActionView
* Formtastic
* Simpleform (please!)

h3. ActionView

<pre>
require 'localized_language/action_views_select'
</pre>

h3. Formtastic

Will auto detect formtastic major version and load the appropriate select helper. 
Should work with Formtastic 2.0

<pre>
require 'localized_language/formtastic_select'
</pre>

h2. Copyright

Copyright (c) 2009 David Cato, released under the MIT license
